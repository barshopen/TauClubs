# This workflow will do a clean install of node dependencies, build the source code, and upload it as a build artifact.
# The output build-artifact of this workflow is named frontend-build-artifact
# After that, it will invoke another job which will build a docker image and push it into ECR
name: CI

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    
env:
  IMAGE_NAME: docker.pkg.github.com/barshopen/tauclubs/tauclubsprod
jobs:

  CRA-Build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [15.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      working-directory: frontend

    - name: Build frontend
      run: yarn build
      working-directory: frontend

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v2
      with:
        name: frontend-build-artifact
        path: frontend/build/


  docker:
    needs: CRA-Build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      
    steps:
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      
    - uses: actions/checkout@v2
    - name: Download static build 
      uses: actions/download-artifact@v2
      with:
        name: frontend-build-artifact
        path: server/__staticbuild__
    
    - name: Create env file
      run: |
        touch .env
        echo FLASK_ENV=production >> .env
        echo MONGO_DB_HOST_USER=${{ secrets.MONGO_DB_HOST_USER }} >> .env
        echo MONGO_DB_HOST_PASSWORD=${{ secrets.MONGO_DB_HOST_PASSWORD }} >> .env
        echo MONGO_DB_CLUSTER_URL=${{ secrets.MONGO_DB_CLUSTER_URL }} >> .env
        echo MONGO_DB_CLUSTER_DB_NAME=${{ secrets.MONGO_DB_CLUSTER_DB_NAME }} >> .env
        echo DB_SECRET=${{ secrets.DB_SECRET }} >> .env
        echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} >> .env
        echo GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} >> .env
        echo EMAIL_USER=${{secrets.EMAIL_USER}} >> .env
        echo EMAIL_PASSWORD=${{secrets.EMAIL_PASSWORD}} >> .env
        
    - name: Docker Login
      uses: docker/login-action@v1.9.0
      with:
        registry: docker.pkg.github.com
        username: ${{ github.repository_owner }}
        password: ${{ secrets.ALLOW_WRITE_PACKAGES }}
        logout: true
            
    - name: Build, tag and push Docker images
      run: |
          docker build --tag docker.pkg.github.com/barshopen/tauclubs/tauclubsprod:${{ steps.date.outputs.date }}-${{ github.sha }} .
          docker tag docker.pkg.github.com/barshopen/tauclubs/tauclubsprod:${{ steps.date.outputs.date }}-${{ github.sha }} docker.pkg.github.com/barshopen/tauclubs/tauclubsprod:latest
          docker push docker.pkg.github.com/barshopen/tauclubs/tauclubsprod:${{ steps.date.outputs.date }}-${{ github.sha }}
          docker push docker.pkg.github.com/barshopen/tauclubs/tauclubsprod:latest
    - name: Build, Push and Release a Docker container to Heroku. 
      uses: gonuit/heroku-docker-deploy@v1.3.3 
      with:
        email: ${{ secrets.HEROKU_EMAIL }}
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}

